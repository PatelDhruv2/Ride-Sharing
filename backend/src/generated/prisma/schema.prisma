generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PASSENGER
  DRIVER
  ADMIN
}

enum RideStatus {
  SCHEDULED
  BOOKED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String
  role               UserRole            @default(PASSENGER)
  vehicle            Vehicle?
  ridesGiven         RideGiven[]         @relation("DriverRides")
  bookings           Booking[]           @relation("PassengerBookings")
  driverVerification DriverVerification?
  location           Location?
  notifications      Notification[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Vehicle {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  model     String
  licenseNo String  @unique
  color     String?
  capacity  Int
}

model RideGiven {
  id             String     @id @default(uuid())
  driver         User       @relation("DriverRides", fields: [driverId], references: [id])
  driverId       String
  startLocation  String
  endLocation    String
  departureTime  DateTime
  availableSeats Int
  price          Float
  status         RideStatus @default(SCHEDULED)
  bookings       Booking[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Booking {
  id          String        @id @default(uuid())
  ride        RideGiven     @relation(fields: [rideId], references: [id])
  rideId      String
  passenger   User          @relation("PassengerBookings", fields: [passengerId], references: [id])
  passengerId String
  baggage     Baggage?
  status      BookingStatus @default(PENDING)
  fare        Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Baggage {
  id           String  @id @default(uuid())
  numberOfBags Int
  totalWeight  Float
  booking      Booking @relation(fields: [bookingId], references: [id])
  bookingId    String  @unique
}

model DriverVerification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  documentUrl String
  verified    Boolean  @default(false)
  uploadedAt  DateTime @default(now())
}

model Location {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  latitude    Float
  longitude   Float
  address     String
  city        String
  state       String
  country     String
  zipCode     String
  lastUpdated DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
